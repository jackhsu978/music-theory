{"version":3,"sources":["Select.js","constants.js","note.js","interval.js","triad.js","scale.js","ScaleChordTable.js","App.js","serviceWorker.js","index.js"],"names":["Select","options","value","setValue","find","onChange","ACCIDENTALS","NOTES","split","reduce","map","letter","SEMITONE_GROUPS","LETTER_TO_SEMITONE","C","D","E","F","G","A","B","groups","normalizeIndex","index","length","Object","keys","forEach","push","getSemitoneGroups","noteNameToSemitone","noteName","findIndex","names","includes","semitoneToNoteNames","semitone","noteNameToLetter","charAt","INTERVALS","n","UNISON","INTERVAL_ORDER","DIMINISHED_2","MINOR_2","MAJOR_2","DIMINISHED_3","MINOR_3","AUGMENTED_2","MAJOR_3","DIMINISHED_4","PERFECT_4","AUGMENTED_3","AUGMENTED_4","DIMINISHED_5","PERFECT_5","DIMINISHED_6","MINOR_6","AUGMENTED_5","MAJOR_6","DIMINISHED_7","MINOR_7","AUGMENTED_6","MAJOR_7","DIMINISHED_8","PERFECT_8","addInterval","intervalName","distance","indexOf","addLetterDistance","parseInt","intervalNameToNumOfLetterDistance","intervalNameToNumOfSemitones","TRIAD_QUALITIES","MAJOR","MINOR","DIMINISHED","AUGMENTED","getTriadThirdInterval","quality","getTriadFithInterval","toTriadCase","noteStr","tiradQuality","toLowerCase","toUpperCase","getTriadQualitySymbol","SCALE_TYPES","SCALE_TYPE_TO_SCALE_NOTES","SCALE_TYPE_TO_TRIAD_QUALITIES","ROMANS","SCALE_DEGREES","getScaleTriadQuality","scaleType","degree","getScaleDegreeNote","tonic","getScaleChordRomanNumeral","romanNumeral","getScaleChordName","note","getScaleChordNotes","rootNote","getNormalizedTonic","enharmonicNotes","endsWith","SCALE_TONIC_OPTIONS","label","D_FLAT","C_SHARP","E_FLAT","D_SHARP","G_FLAT","F_SHARP","A_FLAT","G_SHARP","B_FLAT","A_SHARP","SCALE_TYPE_OPTIONS","INVERSION_OPTIONS","ScaleSelector","scaleTonic","setScaleTonic","setScaleType","style","display","alignItems","justifyContent","padding","width","Chord","chordName","parseTriadQuality","shouldSup","substr","ChordTable","useState","inversion","setInversion","normalizedScaleTonic","cellPadding","colSpan","key","notes","invertCount","slice","concat","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a9f0e55.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactSelect from \"react-select\";\n\nexport default function Select({ options, value, setValue }) {\n  return (\n    <ReactSelect\n      value={options.find(({ value: v }) => v === value)}\n      onChange={({ value }) => setValue(value)}\n      options={options}\n    />\n  );\n}\n","export const ACCIDENTALS = {\n  SHARP: \"‚ôØ\",\n  FLAT: \"‚ô≠\",\n  DOUBLE_SHARP: \"ùÑ™\",\n  DOUBLE_FLAT: \"ùÑ´\",\n  NATURAL: \"‚ôÆ\",\n};\n","import { ACCIDENTALS } from \"./constants\";\n\nexport const NOTES = \"ABCDEFG\".split(\"\").reduce(\n  (map, letter) => ({\n    ...map,\n    [letter]: letter,\n    [`${letter}_SHARP`]: `${letter}${ACCIDENTALS.SHARP}`,\n    [`${letter}_FLAT`]: `${letter}${ACCIDENTALS.FLAT}`,\n    [`${letter}_DOUBLE_SHARP`]: `${letter}${ACCIDENTALS.DOUBLE_SHARP}`,\n    [`${letter}_DOUBLE_FLAT`]: `${letter}${ACCIDENTALS.DOUBLE_FLAT}`,\n  }),\n  {}\n);\n\nconst getSemitoneGroups = () => {\n  const LETTER_TO_SEMITONE = {\n    C: 0,\n    D: 2,\n    E: 4,\n    F: 5,\n    G: 7,\n    A: 9,\n    B: 11,\n  };\n  // group notes by semitone\n  const groups = [[], [], [], [], [], [], [], [], [], [], [], []];\n  const normalizeIndex = index => (index + groups.length) % groups.length;\n  Object.keys(LETTER_TO_SEMITONE).forEach(letter => {\n    const index = LETTER_TO_SEMITONE[letter];\n    groups[index].push(NOTES[letter]);\n    groups[normalizeIndex(index - 2)].push(NOTES[`${letter}_DOUBLE_FLAT`]);\n    groups[normalizeIndex(index - 1)].push(NOTES[`${letter}_FLAT`]);\n    groups[normalizeIndex(index + 1)].push(NOTES[`${letter}_SHARP`]);\n    groups[normalizeIndex(index + 2)].push(NOTES[`${letter}_DOUBLE_SHARP`]);\n  });\n  return groups;\n};\n\nconst SEMITONE_GROUPS = getSemitoneGroups();\n\nexport const noteNameToSemitone = noteName =>\n  SEMITONE_GROUPS.findIndex(names => names.includes(noteName));\n\nexport const semitoneToNoteNames = semitone =>\n  SEMITONE_GROUPS[semitone % SEMITONE_GROUPS.length];\n\nexport const noteNameToLetter = noteName => noteName.charAt(0);\n\nexport const enharmonicNotes = noteName =>\n  semitoneToNoteNames(noteNameToSemitone(noteName));\n","import {\n  noteNameToSemitone,\n  noteNameToLetter,\n  semitoneToNoteNames,\n} from \"./note\";\n\nexport const INTERVALS = [2, 3, 4, 5, 6, 7, 8].reduce(\n  (map, n) => ({\n    ...map,\n    ...([4, 5, 8].includes(n)\n      ? {\n          [`PERFECT_${n}`]: `P${n}`,\n        }\n      : {\n          [`MINOR_${n}`]: `m${n}`,\n          [`MAJOR_${n}`]: `M${n}`,\n        }),\n    [`DIMINISHED_${n}`]: `d${n}`,\n    [`AUGMENTED_${n}`]: `A${n}`,\n  }),\n  { UNISON: \"P1\" }\n);\n\nexport const INTERVAL_ORDER = [\n  [INTERVALS.UNISON, INTERVALS.DIMINISHED_2],\n  [INTERVALS.MINOR_2],\n  [INTERVALS.MAJOR_2, INTERVALS.DIMINISHED_3],\n  [INTERVALS.MINOR_3, INTERVALS.AUGMENTED_2],\n  [INTERVALS.MAJOR_3, INTERVALS.DIMINISHED_4],\n  [INTERVALS.PERFECT_4, INTERVALS.AUGMENTED_3],\n  [INTERVALS.AUGMENTED_4, INTERVALS.DIMINISHED_5],\n  [INTERVALS.PERFECT_5, INTERVALS.DIMINISHED_6],\n  [INTERVALS.MINOR_6, INTERVALS.AUGMENTED_5],\n  [INTERVALS.MAJOR_6, INTERVALS.DIMINISHED_7],\n  [INTERVALS.MINOR_7, INTERVALS.AUGMENTED_6],\n  [INTERVALS.MAJOR_7, INTERVALS.DIMINISHED_8],\n  [INTERVALS.PERFECT_8],\n];\n\nconst intervalNameToNumOfSemitones = intervalName =>\n  INTERVAL_ORDER.findIndex(names => names.includes(intervalName));\n\nconst A_TO_G = \"ABCDEFG\";\nconst addLetterDistance = (letter, distance) =>\n  A_TO_G.charAt((A_TO_G.indexOf(letter) + distance) % A_TO_G.length);\n\nconst intervalNameToNumOfLetterDistance = intervalName =>\n  parseInt(intervalName.charAt(1), 10) - 1;\n\nexport const addInterval = (noteName, intervalName) => {\n  const letter = addLetterDistance(\n    noteNameToLetter(noteName),\n    intervalNameToNumOfLetterDistance(intervalName)\n  );\n  return semitoneToNoteNames(\n    noteNameToSemitone(noteName) + intervalNameToNumOfSemitones(intervalName)\n  ).find(n => noteNameToLetter(n) === letter);\n};\n","import { INTERVALS, addInterval } from \"./interval\";\n\nexport const TRIAD_QUALITIES = {\n  MAJOR: \"\",\n  MINOR: \"m\",\n  DIMINISHED: \"o\",\n  AUGMENTED: \"+\",\n};\n\nexport const TRIAD_POSITIONS = { ROOT: \"a\", FIRST: \"b\", SECOND: \"c\" };\n\nconst getTriadThirdInterval = quality => {\n  switch (quality) {\n    case TRIAD_QUALITIES.MINOR:\n    case TRIAD_QUALITIES.DIMINISHED:\n      return INTERVALS.MINOR_3;\n    default:\n      return INTERVALS.MAJOR_3;\n  }\n};\n\nconst getTriadFithInterval = quality => {\n  switch (quality) {\n    case TRIAD_QUALITIES.AUGMENTED:\n      return INTERVALS.AUGMENTED_5;\n    case TRIAD_QUALITIES.DIMINISHED:\n      return INTERVALS.DIMINISHED_5;\n    default:\n      return INTERVALS.PERFECT_5;\n  }\n};\n\nexport const invertChord = (notes, invertCount) =>\n  notes.slice(invertCount).concat(notes.slice(0, invertCount));\n\nexport const getTriadChordNotes = (rootNote, quality) => [\n  rootNote,\n  addInterval(rootNote, getTriadThirdInterval(quality)),\n  addInterval(rootNote, getTriadFithInterval(quality)),\n];\n\nexport const toTriadCase = (noteStr, tiradQuality) =>\n  [TRIAD_QUALITIES.MINOR, TRIAD_QUALITIES.DIMINISHED].includes(tiradQuality)\n    ? noteStr.toLowerCase()\n    : noteStr.toUpperCase();\n\nexport const getTriadQualitySymbol = tiradQuality => {\n  switch (tiradQuality) {\n    case TRIAD_QUALITIES.DIMINISHED:\n      return \"o\";\n    case TRIAD_QUALITIES.AUGMENTED:\n      return \"+\";\n    default:\n      return \"\";\n  }\n};\n\nexport const parseTriadQuality = chordName => {\n  if (chordName.endsWith(getTriadQualitySymbol(TRIAD_QUALITIES.DIMINISHED))) {\n    return TRIAD_QUALITIES.DIMINISHED;\n  }\n  if (chordName.endsWith(getTriadQualitySymbol(TRIAD_QUALITIES.AUGMENTED))) {\n    return TRIAD_QUALITIES.AUGMENTED;\n  }\n  const letter = chordName.charAt(0);\n  return letter.toLowerCase() === letter\n    ? TRIAD_QUALITIES.MINOR\n    : TRIAD_QUALITIES.MAJOR;\n};\n","import { ACCIDENTALS } from \"./constants\";\nimport { INTERVALS, addInterval } from \"./interval\";\nimport { enharmonicNotes } from \"./note\";\nimport {\n  TRIAD_QUALITIES,\n  getTriadChordNotes,\n  toTriadCase,\n  getTriadQualitySymbol,\n} from \"./triad\";\n\nexport const SCALE_TYPES = {\n  MAJOR: \"Major\",\n  HARMONIC_MINOR: \"Harmonic Minor\",\n};\n\nconst SCALE_TYPE_TO_SCALE_NOTES = {\n  [SCALE_TYPES.MAJOR]: [\n    INTERVALS.UNISON,\n    INTERVALS.MAJOR_2,\n    INTERVALS.MAJOR_3,\n    INTERVALS.PERFECT_4,\n    INTERVALS.PERFECT_5,\n    INTERVALS.MAJOR_6,\n    INTERVALS.MAJOR_7,\n  ],\n  [SCALE_TYPES.HARMONIC_MINOR]: [\n    INTERVALS.UNISON,\n    INTERVALS.MAJOR_2,\n    INTERVALS.MINOR_3,\n    INTERVALS.PERFECT_4,\n    INTERVALS.PERFECT_5,\n    INTERVALS.MINOR_6,\n    INTERVALS.MAJOR_7,\n  ],\n};\n\nconst SCALE_TYPE_TO_TRIAD_QUALITIES = {\n  [SCALE_TYPES.MAJOR]: [\n    TRIAD_QUALITIES.MAJOR,\n    TRIAD_QUALITIES.MINOR,\n    TRIAD_QUALITIES.MINOR,\n    TRIAD_QUALITIES.MAJOR,\n    TRIAD_QUALITIES.MAJOR,\n    TRIAD_QUALITIES.MINOR,\n    TRIAD_QUALITIES.DIMINISHED,\n  ],\n  [SCALE_TYPES.HARMONIC_MINOR]: [\n    TRIAD_QUALITIES.MINOR,\n    TRIAD_QUALITIES.DIMINISHED,\n    TRIAD_QUALITIES.AUGMENTED,\n    TRIAD_QUALITIES.MINOR,\n    TRIAD_QUALITIES.MAJOR,\n    TRIAD_QUALITIES.MAJOR,\n    TRIAD_QUALITIES.DIMINISHED,\n  ],\n};\n\nconst ROMANS = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"];\n\nconst toRoman = n => ROMANS[n - 1];\n\nexport const SCALE_DEGREES = [1, 2, 3, 4, 5, 6, 7];\n\nconst getScaleTriadQuality = (scaleType, degree) =>\n  SCALE_TYPE_TO_TRIAD_QUALITIES[scaleType][degree - 1];\n\nconst getScaleDegreeNote = (scaleType, tonic, degree) =>\n  addInterval(tonic, SCALE_TYPE_TO_SCALE_NOTES[scaleType][degree - 1]);\n\nconst addTriadQualityToRomanNumeral = (romanNumeral, tiradQuality) =>\n  `${toTriadCase(romanNumeral, tiradQuality)}${getTriadQualitySymbol(\n    tiradQuality\n  )}`;\n\nexport const getScaleChordRomanNumeral = (scaleType, degree) =>\n  addTriadQualityToRomanNumeral(\n    toRoman(degree),\n    getScaleTriadQuality(scaleType, degree)\n  );\n\nexport const getScaleChordName = (scaleType, tonic, degree) => {\n  const note = getScaleDegreeNote(scaleType, tonic, degree);\n  const quality = getScaleTriadQuality(scaleType, degree);\n  return `${toTriadCase(note, quality)}${getTriadQualitySymbol(quality)}`;\n};\n\nexport const getScaleChordNotes = (scaleType, tonic, degree) =>\n  getTriadChordNotes(\n    getScaleDegreeNote(scaleType, tonic, degree),\n    getScaleTriadQuality(scaleType, degree)\n  );\n\nexport const getNormalizedTonic = (noteName, scaleType) => {\n  if (noteName.length === 1) {\n    return noteName;\n  }\n  return enharmonicNotes(noteName).find(noteName =>\n    scaleType === SCALE_TYPES.MAJOR\n      ? noteName.endsWith(ACCIDENTALS.FLAT)\n      : noteName.endsWith(ACCIDENTALS.SHARP)\n  );\n};\n","import React, { Fragment, useState } from \"react\";\nimport Select from \"./Select\";\nimport { NOTES } from \"./note\";\nimport {\n  getScaleChordRomanNumeral,\n  getScaleChordName,\n  getScaleChordNotes,\n  getNormalizedTonic,\n  SCALE_DEGREES,\n  SCALE_TYPES,\n} from \"./scale\";\nimport {\n  invertChord,\n  parseTriadQuality,\n  getTriadQualitySymbol,\n  TRIAD_QUALITIES,\n} from \"./triad\";\n\nconst SCALE_TONIC_OPTIONS = [\n  { value: NOTES.C, label: `${NOTES.C}` },\n  { value: NOTES.D_FLAT, label: `${NOTES.D_FLAT}/${NOTES.C_SHARP}` },\n  { value: NOTES.D, label: `${NOTES.D}` },\n  { value: NOTES.E_FLAT, label: `${NOTES.E_FLAT}/${NOTES.D_SHARP}` },\n  { value: NOTES.E, label: `${NOTES.E}` },\n  { value: NOTES.F, label: `${NOTES.F}` },\n  { value: NOTES.G_FLAT, label: `${NOTES.G_FLAT}/${NOTES.F_SHARP}` },\n  { value: NOTES.G, label: `${NOTES.G}` },\n  { value: NOTES.A_FLAT, label: `${NOTES.A_FLAT}/${NOTES.G_SHARP}` },\n  { value: NOTES.A, label: `${NOTES.A}` },\n  { value: NOTES.B_FLAT, label: `${NOTES.B_FLAT}/${NOTES.A_SHARP}` },\n  { value: NOTES.B, label: `${NOTES.B}` },\n];\n\nconst SCALE_TYPE_OPTIONS = [\n  { value: SCALE_TYPES.MAJOR, label: SCALE_TYPES.MAJOR },\n  { value: SCALE_TYPES.HARMONIC_MINOR, label: SCALE_TYPES.HARMONIC_MINOR },\n];\n\nconst INVERSION_OPTIONS = [\n  { value: 0, label: \"Root position (a)\" },\n  { value: 1, label: \"1st inversion (b)\" },\n  { value: 2, label: \"2nd inversion (c)\" },\n];\n\nfunction ScaleSelector({ scaleTonic, setScaleTonic, scaleType, setScaleType }) {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <div style={{ padding: 4, width: 100 }}>\n        <Select\n          value={scaleTonic}\n          options={SCALE_TONIC_OPTIONS}\n          setValue={setScaleTonic}\n        />\n      </div>\n      <div style={{ padding: 4, width: 200 }}>\n        <Select\n          value={scaleType}\n          options={SCALE_TYPE_OPTIONS}\n          setValue={setScaleType}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Chord({ value }) {\n  const quality = parseTriadQuality(value);\n  const shouldSup = [\n    TRIAD_QUALITIES.DIMINISHED,\n    TRIAD_QUALITIES.AUGMENTED,\n  ].includes(quality);\n  return (\n    <span>\n      {shouldSup ? (\n        <Fragment>\n          {value.substr(0, value.length - 1)}\n          <sup>{getTriadQualitySymbol(quality)}</sup>\n        </Fragment>\n      ) : (\n        value\n      )}\n    </span>\n  );\n}\n\nexport default function ChordTable() {\n  const [scaleTonic, setScaleTonic] = useState(NOTES.C);\n  const [scaleType, setScaleType] = useState(SCALE_TYPES.MAJOR);\n  const [inversion, setInversion] = useState(0);\n  const normalizedScaleTonic = getNormalizedTonic(scaleTonic, scaleType);\n  return (\n    <table cellPadding={8}>\n      <thead>\n        <tr>\n          <th colSpan={6}>\n            <ScaleSelector\n              scaleTonic={scaleTonic}\n              scaleType={scaleType}\n              setScaleTonic={setScaleTonic}\n              setScaleType={setScaleType}\n            />\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th>Degree</th>\n          <th>Roman</th>\n          <th>Chord</th>\n          <td colSpan={3} style={{ width: 180 }}>\n            <Select\n              value={inversion}\n              options={INVERSION_OPTIONS}\n              setValue={setInversion}\n            />\n          </td>\n        </tr>\n        {SCALE_DEGREES.map(degree => {\n          return (\n            <tr key={degree}>\n              <th>{degree}</th>\n              <td>\n                <Chord value={getScaleChordRomanNumeral(scaleType, degree)} />\n              </td>\n              <td>\n                <Chord\n                  value={getScaleChordName(\n                    scaleType,\n                    normalizedScaleTonic,\n                    degree\n                  )}\n                />\n              </td>\n              <Fragment>\n                {invertChord(\n                  getScaleChordNotes(scaleType, normalizedScaleTonic, degree),\n                  inversion\n                ).map(note => (\n                  <td key={note}>{note}</td>\n                ))}\n              </Fragment>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import React from \"react\";\nimport ScaleChordTable from \"./ScaleChordTable\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Chord Table</h1>\n        <ScaleChordTable />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}